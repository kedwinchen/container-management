#!/bin/bash

export CONTAINER_ROOT="${CONTAINER_ROOT:-'/var/srv/containers'}"
source "${CONTAINER_ROOT}/.bin/rc.bash"

if [[ $# -ne 1 ]]; then
    printf "Usage: %s CONTAINER_NAME\n" "${0}"
    exit 1
fi

CONTAINER_NAME="${1}"
shift

source "$(container_home ${CONTAINER_NAME})/vars.bash"
CONTAINER_DATA_HOME="$(container_data_home ${CONTAINER_NAME})"

for v in ${CONTAINER_VOLUMES[@]}; do
    this_dir="$(printf ${v} | cut -d':' -f1 -- -)"
    # printf '[INFO] (container %s) creating: %s\n' "${CONTAINER_NAME}" "${this_dir}"
    mkdir -vp "${CONTAINER_DATA_HOME}/${this_dir}"
done

if ! "${CM_CMD}" network inspect "${CM_CMD_DEFAULT_NETWORK}" &>/dev/null ; then
    "${CM_CMD}" network create --driver bridge "${CM_CMD_DEFAULT_NETWORK}"
fi

set -x
"${CM_CMD}" create $(container_cmcmd_opt_str ${CONTAINER_NAME})
set +x

for nw in ${CONTAINER_NETWORKS[@]}; do
    if ! "${CM_CMD}" network inspect "${nw}" &>/dev/null ; then
        if "${CM_CMD}" network create --driver bridge "${nw}" ; then
            printf '%s: Created new network (for %s): %s\n' "${0}" "${CM_CMD}" "${nw}"
        else
            printf '%s: FAILED TO CREATE NETWORK (for %s): %s\n' "${0}" "${CM_CMD}" "${nw}"
        fi
    fi

    if "${CM_CMD}" network connect "${nw}" "${CONTAINER_NAME}" ; then
        printf '%s: Connected container (%s) to network (%s)\n' "${0}" "${CONTAINER_NAME}" "${nw}"
    else
        printf '%s: FAILED TO CONNECT CONTAINER (%s) TO NETWORK (%s)\n' "${0}" "${CONTAINER_NAME}" "${nw}"
    fi
done
